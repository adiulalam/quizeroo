// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Answer {
    id        String   @id @default(uuid())
    name      String
    isCorrect Boolean  @default(false)
    order     Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    userAnswers UserAnswer[]

    @@index([questionId])
}

model Question {
    id        String   @id @default(uuid())
    name      String
    order     Int      @default(autoincrement())
    countdown Int      @default(30)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quizId String
    quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

    answers      Answer[]
    quizSessions QuizSession[]
    userAnswers  UserAnswer[]

    @@index([quizId])
}

model Quiz {
    id          String   @id @default(uuid())
    status      Status   @default(DRAFT)
    isFavourite Boolean  @default(false)
    title       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    questions    Question[]
    quizSessions QuizSession[]

    @@index([userId, title])
}

model QuizSession {
    id             String   @id @default(uuid())
    roomName       String   @unique
    isActive       Boolean  @default(false)
    showSubmission Boolean  @default(false)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    quizId String
    quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

    currentQuestionId String?
    question          Question? @relation(fields: [currentQuestionId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "userId")

    userAnswers UserAnswer[]
    users       User[]       @relation(name: "quizSessionId")

    @@index([roomName, quizId, userId])
}

model UserAnswer {
    id        String   @id @default(uuid())
    score     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    quizSessionId String
    quizSession   QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)

    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    answerId String
    answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

    @@index([userId, quizSessionId, answerId])
}

model Post {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    dateOfBirth   DateTime? @db.Date
    gender        Gender?
    phone         String?   @unique @db.VarChar(15)
    isTempUser    Boolean   @default(false)
    isActive      Boolean   @default(true)

    quizSessionId String?
    quizSession   QuizSession? @relation(fields: [quizSessionId], references: [id], onDelete: Cascade, name: "quizSessionId")

    accounts     Account[]
    sessions     Session[]
    posts        Post[]
    quizSessions QuizSession[] @relation(name: "userId")
    quizzes      Quiz[]
    userAnswers  UserAnswer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Status {
    DRAFT
    COMPLETED
}

enum Gender {
    MALE
    FEMALE
    OTHER
}
