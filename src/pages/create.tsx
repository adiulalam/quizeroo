import { NavbarContainer } from "@/components/nav";
import { QuizCreate } from "@/components/quizMutation";
import {
  Filterable,
  Orderable,
  QuizCard,
  Sortable,
  TempUserAlert,
} from "@/components/quizView";
import { QuizSkeleton } from "@/components/skeleton";
import { ErrorBox } from "@/components/ui/ErrorBox";
import InfiniteScroll from "@/components/ui/InfiniteScroll";
import { H1 } from "@/components/ui/Typography";
import { ViewQuizProvider } from "@/provider";
import { authOptions } from "@/server/auth";
import { Filter, Order, Sort } from "@/types/Quiz.types";
import { api } from "@/utils/api";
import { getFilterBy, getOrderBy, getSortBy } from "@/utils/functions";
import type { GetServerSidePropsContext } from "next";
import { getServerSession, type Session } from "next-auth";
import Head from "next/head";
import { useSearchParams } from "next/navigation";

const Create = ({ userSession }: { userSession: Session }) => {
  const searchParams = useSearchParams();

  const filter_by = searchParams.get("filter_by") ?? Filter.all;
  const filter = getFilterBy(filter_by);

  const sort_by = searchParams.get("sort_by") ?? Sort.updatedAt;
  const sort = getSortBy(sort_by);

  const order_by = searchParams.get("order_by") ?? Order.desc;
  const order = getOrderBy(order_by);

  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    isLoading,
    isError,
    refetch,
  } = api.quiz.getQuizzes.useInfiniteQuery(
    {
      filter,
      sort,
      order,
    },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    },
  );

  if (isError) {
    return (
      <NavbarContainer>
        <div className="flex h-full w-full items-center justify-center">
          <ErrorBox refetch={refetch} />
        </div>
      </NavbarContainer>
    );
  }

  return (
    <>
      <Head>
        <title>Quizeroo - Create</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavbarContainer>
        <div className="flex flex-col gap-2">
          {userSession.user.isTempUser && <TempUserAlert />}
          <div className="flex w-full flex-col-reverse flex-wrap justify-between gap-2 sm:flex-row">
            <div className="flex justify-between gap-2 sm:justify-normal">
              <QuizCreate isTempUser={userSession.user.isTempUser} />
              <div className="flex gap-2">
                <Sortable />
                <Orderable />
              </div>
            </div>
            <Filterable />
          </div>
          {isLoading ? (
            <div className="flex h-full w-full flex-row flex-wrap items-center justify-evenly gap-4">
              {[...Array(2).keys()].map((i) => (
                <QuizSkeleton key={i} />
              ))}
            </div>
          ) : (
            <>
              <div
                className="flex h-full w-full flex-row flex-wrap items-center justify-evenly gap-4"
                data-testid="quiz-items"
              >
                {data?.pages.map((quizzesData) =>
                  quizzesData.data.quizzes.map((quizData) => (
                    <ViewQuizProvider key={quizData.id} value={quizData}>
                      <QuizCard />
                    </ViewQuizProvider>
                  )),
                )}
                {(data?.pages[0]?.data.quizzes.length ?? 0) <= 0 && (
                  <div
                    className="flex h-40 max-w-md items-center justify-center"
                    data-testid="header-no-quiz"
                  >
                    <H1 className="text-center">No Quiz has been found.</H1>
                  </div>
                )}
              </div>
              <InfiniteScroll
                hasMore={hasNextPage ?? false}
                isLoading={isFetchingNextPage}
                next={fetchNextPage}
                threshold={0}
              >
                {(hasNextPage ?? false) && (
                  <div className="flex h-full w-full flex-row flex-wrap items-center justify-evenly gap-4">
                    <QuizSkeleton />
                  </div>
                )}
              </InfiniteScroll>
            </>
          )}
        </div>
      </NavbarContainer>
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  try {
    const userSession = await getServerSession(
      context.req,
      context.res,
      authOptions,
    );

    if (!userSession?.user?.id) {
      return { redirect: { destination: "/", permanent: false } };
    }

    return { props: { userSession } };
  } catch (error) {
    console.error(error);
    return { redirect: { destination: "/", permanent: false } };
  }
}

export default Create;
