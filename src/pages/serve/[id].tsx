import { ServeContainer } from "@/components/serve";
import { authOptions } from "@/server/auth";
import { getSessionNameHandler } from "@/server/controller/quizSession.controller";
import type { QuizSession } from "@prisma/client";
import type { GetServerSidePropsContext } from "next";
import { getServerSession } from "next-auth";
import Head from "next/head";

const Serve = ({ quizSession }: { quizSession: QuizSession }) => {
  return (
    <>
      <Head>
        <title>Quizeroo - Serve</title>
        <meta name="description" content="Generated by Adiul" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ServeContainer id={quizSession.id} />
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  try {
    const id = context.query.id;

    const userSession = await getServerSession(
      context.req,
      context.res,
      authOptions,
    );

    if (!userSession || typeof id !== "string") {
      return { redirect: { destination: "/", permanent: false } };
    }

    const quizSession = await getSessionNameHandler({
      input: { roomName: id },
    });

    if (userSession.user.id !== quizSession.userId || !quizSession.isActive) {
      return { redirect: { destination: "/", permanent: false } };
    }

    return { props: { userSession, quizSession } };
  } catch (error) {
    console.error(error);
    return { redirect: { destination: "/", permanent: false } };
  }
}

export default Serve;
